// Copyright 2019 NetApp, Inc. All Rights Reserved.

package utils

import (
	"context"
	"errors"
	"net"

	. "github.com/netapp/trident/logger"
)

// The Trident build process builds the Trident CLI client for both linux and darwin.
// At compile time golang will type checks the entire code base. Since the CLI is part
// of the Trident code base this file exists to handle darwin specific code.

// getIPAddresses returns the IP addresses of the host.
// Parameters:
//   ctx - context
// Returns:
//   []net.Addr - the IP addresses of the host
//   error - error if any
// Example:
//   []net.Addr, err := utils.getIPAddresses(ctx)
//
// -- Doc autogenerated on 2022-05-12 14:49:46.905128 --
func getIPAddresses(ctx context.Context) ([]net.Addr, error) {

	Logc(ctx).Debug(">>>> osutils_darwin.getIPAddresses")
	defer Logc(ctx).Debug("<<<< osutils_darwin.getIPAddresses")
	return nil, errors.New("getIPAddresses is not supported for darwin")
}

// getFilesystemSize returns the size of the filesystem containing the given path.
// Parameters:
//   path - path to a file or directory
// Returns:
//   size of the filesystem in bytes
//   error - nil if successful
// Example:
//   size, err := getFilesystemSize("/tmp")
//
// -- Doc autogenerated on 2022-05-12 14:49:46.905128 --
func getFilesystemSize(ctx context.Context, _ string) (int64, error) {

	Logc(ctx).Debug(">>>> osutils_darwin.getFilesystemSize")
	defer Logc(ctx).Debug("<<<< osutils_darwin.getFilesystemSize")
	return 0, errors.New("getFilesystemSize is not supported for darwin")
}

// GetFilesystemStats returns the filesystem stats for the given path
// Parameters:
//   ctx - context for logging
//   path - the path to get the stats for
// Returns:
//   total - total size of the filesystem
//   free - free space on the filesystem
//   avail - available space on the filesystem
//   files - number of files on the filesystem
//   ffree - number of free files on the filesystem
//   fsid - filesystem id
//   err - any error encountered
// Example:
//   total, free, avail, files, ffree, fsid, err := GetFilesystemStats(ctx, "/")
//
// -- Doc autogenerated on 2022-05-12 14:49:46.905128 --
func GetFilesystemStats(ctx context.Context, _ string) (int64, int64, int64, int64, int64, int64, error) {

	Logc(ctx).Debug(">>>> osutils_darwin.GetFilesystemStats")
	defer Logc(ctx).Debug("<<<< osutils_darwin.GetFilesystemStats")
	return 0, 0, 0, 0, 0, 0, errors.New("GetFilesystemStats is not supported for darwin")
}

// getISCSIDiskSize returns the size of the iSCSI disk
// Parameters:
//    ctx - context for logging
//    device - the device name
// Returns:
//    size - the size of the iSCSI disk
//    err - any error encountered
// Example:
//    size, err := getISCSIDiskSize(context.Background(), "/dev/disk2")
//    if err != nil {
//        return err
//    }
//
// -- Doc autogenerated on 2022-05-12 14:49:46.905128 --
func getISCSIDiskSize(ctx context.Context, _ string) (int64, error) {

	Logc(ctx).Debug(">>>> osutils_darwin.getISCSIDiskSize")
	defer Logc(ctx).Debug("<<<< osutils_darwin.getISCSIDiskSize")
	return 0, errors.New("getBlockSize is not supported for darwin")
}

// flushOneDevice is not supported for darwin
// It returns an error
// Parameters:
//   ctx - logging context
//   devicePath - the device to flush
// Returns:
//   error - any error encountered
// Example:
//   err := flushOneDevice(ctx, devicePath)
//
// -- Doc autogenerated on 2022-05-12 14:49:46.905128 --
func flushOneDevice(ctx context.Context, devicePath string) error {
	Logc(ctx).Debug(">>>> osutils_darwin.flushOneDevice")
	defer Logc(ctx).Debug("<<<< osutils_darwin.flushOneDevice")
	return errors.New("flushOneDevice is not supported for darwin")
}

// GetHostSystemInfo is not supported for darwin
// It returns an error
// Parameters:
//   ctx - logging context
// Returns:
//   *HostSystem - host system information
//   error - error object if any
// Example:
//   hs, err := GetHostSystemInfo(ctx)
//
// -- Doc autogenerated on 2022-05-12 14:49:46.905128 --
func GetHostSystemInfo(ctx context.Context) (*HostSystem, error) {

	Logc(ctx).Debug(">>>> osutils_darwin.GetHostSystemInfo")
	defer Logc(ctx).Debug("<<<< osutils_darwin.GetHostSystemInfo")
	msg := "GetHostSystemInfo is not is not supported for darwin"
	return nil, UnsupportedError(msg)
}

// PrepareNFSPackagesOnHost is not is not supported for darwin
// It returns an UnsupportedError
// Parameters:
//   ctx - context for logging
//   host - host system
// Returns:
//   error - error if any
// Example:
//   err := osutils_darwin.PrepareNFSPackagesOnHost(ctx, host)
//
// -- Doc autogenerated on 2022-05-12 14:49:46.905128 --
func PrepareNFSPackagesOnHost(ctx context.Context, host HostSystem) error {

	Logc(ctx).Debug(">>>> osutils_darwin.PrepareNFSPackagesOnHost")
	defer Logc(ctx).Debug("<<<< osutils_darwin.PrepareNFSPackagesOnHost")
	msg := "PrepareNFSPackagesOnHost is not is not supported for darwin"
	return UnsupportedError(msg)
}

// PrepareNFSServicesOnHost is not supported for darwin
// It returns an UnsupportedError
// Parameters:
//   ctx - context for logging
// Returns:
//   error - an error if one occurred
// Example:
//   err := utils.PrepareNFSServicesOnHost(ctx)
//
// -- Doc autogenerated on 2022-05-12 14:49:46.905128 --
func PrepareNFSServicesOnHost(ctx context.Context) error {
	Logc(ctx).Debug(">>>> osutils_darwin.PrepareNFSServicesOnHost")
	defer Logc(ctx).Debug("<<<< osutils_darwin.PrepareNFSServicesOnHost")
	msg := "PrepareNFSServicesOnHost is not is not supported for darwin"
	return UnsupportedError(msg)
}

// ServiceActiveOnHost checks if a service is active on the host
// It returns true if the service is active, false if not, and an error if there was a problem
// Parameters:
//   ctx - context for logging
//   service - the service to check
// Returns:
//   bool - true if the service is active, false if not
//   error - an error if there was a problem
// Example:
//   active, err := utils.ServiceActiveOnHost(ctx, "iscsi")
//
// -- Doc autogenerated on 2022-05-12 14:49:46.905128 --
func ServiceActiveOnHost(ctx context.Context, service string) (bool, error) {
	Logc(ctx).Debug(">>>> osutils_darwin.ServiceActiveOnHost")
	defer Logc(ctx).Debug("<<<< osutils_darwin.ServiceActiveOnHost")
	msg := "ServiceActiveOnHost is not is not supported for darwin"
	return false, UnsupportedError(msg)
}

// ServiceEnabledOnHost checks if a service is enabled on the host
// It returns true if the service is enabled, false if not, and an error
// Parameters:
//    ctx - context for logging
//    service - the service to check
// Returns:
//    bool - true if the service is enabled, false if not
//    error - any error encountered
// Example:
//    enabled, err := ServiceEnabledOnHost(ctx, "glusterd")
//
// -- Doc autogenerated on 2022-05-12 14:49:46.905128 --
func ServiceEnabledOnHost(ctx context.Context, service string) (bool, error) {
	Logc(ctx).Debug(">>>> osutils_darwin.ServiceEnabledOnHost")
	defer Logc(ctx).Debug("<<<< osutils_darwin.ServiceEnabledOnHost")
	msg := "ServiceEnabledOnHost is not is not supported for darwin"
	return false, UnsupportedError(msg)
}

// ISCSIActiveOnHost returns true if iSCSI is active on the host
// Parameters:
//    host - host system
// Returns:
//    bool - true if iSCSI is active on the host
//    error - any error encountered
// Example:
//    isActive, err := ISCSIActiveOnHost(host)
//
// -- Doc autogenerated on 2022-05-12 14:49:46.905128 --
func ISCSIActiveOnHost(ctx context.Context, host HostSystem) (bool, error) {
	Logc(ctx).Debug(">>>> osutils_darwin.ISCSIActiveOnHost")
	defer Logc(ctx).Debug("<<<< osutils_darwin.ISCSIActiveOnHost")
	msg := "ISCSIActiveOnHost is not is not supported for darwin"
	return false, UnsupportedError(msg)
}

// PrepareISCSIPackagesOnHost is not supported on darwin
// It returns an UnsupportedError
// Parameters:
//   ctx - context for logging
//   host - host system
//   iscsiPreconfigured - true if the host is already configured for iSCSI
// Returns:
//   error - an error if one occurred
// Example:
//   err := PrepareISCSIPackagesOnHost(ctx, host, iscsiPreconfigured)
//
// -- Doc autogenerated on 2022-05-12 14:49:46.905128 --
func PrepareISCSIPackagesOnHost(ctx context.Context, host HostSystem, iscsiPreconfigured bool) error {
	Logc(ctx).Debug(">>>> osutils_darwin.PrepareISCSIPackagesOnHost")
	defer Logc(ctx).Debug("<<<< osutils_darwin.PrepareISCSIPackagesOnHost")
	msg := "PrepareISCSIPackagesOnHost is not is not supported for darwin"
	return UnsupportedError(msg)
}

// PrepareISCSIServicesOnHost is not supported for darwin
// It returns an UnsupportedError
// Parameters:
//   ctx - context for logging
//   host - the host to prepare
// Returns:
//   error - an error if one occurred, otherwise nil
// Example:
//   err := PrepareISCSIServicesOnHost(ctx, host)
//   if err != nil {
//       // Handle error
//   }
//
// -- Doc autogenerated on 2022-05-12 14:49:46.905128 --
func PrepareISCSIServicesOnHost(ctx context.Context, host HostSystem) error {
	Logc(ctx).Debug(">>>> osutils_darwin.PrepareISCSIServicesOnHost")
	defer Logc(ctx).Debug("<<<< osutils_darwin.PrepareISCSIServicesOnHost")
	msg := "PrepareISCSIServicesOnHost is not is not supported for darwin"
	return UnsupportedError(msg)
}
