package installer

// getServiceAccountName returns the name of the service account to use for Trident
// Parameters:
//   csi (bool) - true if Trident is being installed as a CSI driver; false if Trident is being installed as a legacy driver
// Returns:
//   (string) - the name of the service account to use for Trident
// Example:
//   name := getServiceAccountName(true)
//
// -- Doc autogenerated on 2022-05-12 21:13:42.659080 --
func getServiceAccountName(csi bool) string {
	if csi {
		return TridentCSI
	} else {
		return TridentLegacy
	}
}

// getClusterRoleName returns the name of the cluster role to use for the given CSI flag
// Parameters:
//   csi - true if Trident should be installed as a CSI driver
// Returns:
//   string - name of the cluster role to use
// Example:
//   getClusterRoleName(false)
//   > "trident"
//
// -- Doc autogenerated on 2022-05-12 21:13:42.659080 --
func getClusterRoleName(csi bool) string {
	if csi {
		return TridentCSI
	} else {
		return TridentLegacy
	}
}

// getClusterRoleBindingName returns the name of the cluster role binding to use
// Parameters:
//   csi - true if Trident should be installed as a CSI driver
// Returns:
//   string - the name of the cluster role binding to use
// Example:
//   getClusterRoleBindingName(true)
//   > "trident-csi"
//
// -- Doc autogenerated on 2022-05-12 21:13:42.659080 --
func getClusterRoleBindingName(csi bool) string {
	if csi {
		return TridentCSI
	} else {
		return TridentLegacy
	}
}

// getPSPName returns the name of the PSP to use
// Returns:
//   string: the name of the PSP
// Example:
//   psp := getPSPName()
//
// -- Doc autogenerated on 2022-05-12 21:13:42.659080 --
func getPSPName() string {
	return TridentPSP
}

// getServiceName returns the name of the service
// Returns:
//   string: the name of the service
// Example:
//   installer.getServiceName()
//
// -- Doc autogenerated on 2022-05-12 21:13:42.659080 --
func getServiceName() string {
	return TridentCSI
}

// getProtocolSecretName returns the name of the protocol secret
// Returns:
//   string - the name of the protocol secret
// Example:
//   getProtocolSecretName()
//
// -- Doc autogenerated on 2022-05-12 21:13:42.659080 --
func getProtocolSecretName() string {
	return TridentCSI
}

// getEncryptionSecretName returns the name of the secret that contains the encryption keys
// Returns:
//   string: the name of the secret
// Example:
//   getEncryptionSecretName()
//
// -- Doc autogenerated on 2022-05-12 21:13:42.659080 --
func getEncryptionSecretName() string {
	return TridentEncryptionKeys
}

// getDeploymentName returns the name of the Trident deployment
// Parameters:
//   csi - true if the CSI deployment should be used
// Returns:
//   The name of the Trident deployment
// Example:
//   getDeploymentName(true) returns "trident-csi"
//
// -- Doc autogenerated on 2022-05-12 21:13:42.659080 --
func getDeploymentName(csi bool) string {
	if csi {
		return TridentCSI
	} else {
		return TridentLegacy
	}
}

// getDaemonSetName returns the name of the Trident CSI DaemonSet
// Returns:
//   string: the name of the Trident CSI DaemonSet
// Example:
//   name := getDaemonSetName()
//
// -- Doc autogenerated on 2022-05-12 21:13:42.659080 --
func getDaemonSetName() string {
	return TridentCSI
}

// getCSIDriverName returns the name of the CSI driver
// Returns:
//   string: the name of the CSI driver
// Example:
//   csiDriverName := getCSIDriverName()
//
// -- Doc autogenerated on 2022-05-12 21:13:42.659080 --
func getCSIDriverName() string {
	return CSIDriver
}

// getOpenShiftSCCUserName returns the name of the OpenShift SCC user
// depending on whether CSI is enabled or not.
// Returns:
//   TridentCSI: if CSI is enabled
//   TridentLegacy: if CSI is disabled
// Example:
//   sccuser := getOpenShiftSCCUserName()
//
// -- Doc autogenerated on 2022-05-12 21:13:42.659080 --
func getOpenShiftSCCUserName() string {
	if csi {
		return TridentCSI
	} else {
		return TridentLegacy
	}
}

// getOpenShiftSCCName returns the name of the SCC to use for OpenShift
// Returns:
//   string: the name of the SCC to use for OpenShift
// Example:
//   sccName := installer.getOpenShiftSCCName()
//
// -- Doc autogenerated on 2022-05-12 21:13:42.659080 --
func getOpenShiftSCCName() string {
	return OpenShiftSCCName
}
