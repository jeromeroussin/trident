package installer

// getServiceAccountName returns the name of the service account to use for Trident
// Parameters:
//   csi - if true, use the CSI service account name
// Returns:
//   the service account name
// Example:
//   getServiceAccountName(true)
//   Returns: "trident-csi"
//
// -- Doc autogenerated on 2022-05-12 19:03:40.444825 --
func getServiceAccountName(csi bool) string {
	if csi {
		return TridentCSI
	} else {
		return TridentLegacy
	}
}

// getClusterRoleName returns the name of the cluster role to use for Trident
// Parameters:
//   csi - whether to use the CSI driver
// Return:
//   string - the name of the cluster role
// Example:
//   getClusterRoleName(true)
//
// -- Doc autogenerated on 2022-05-12 19:03:40.444825 --
func getClusterRoleName(csi bool) string {
	if csi {
		return TridentCSI
	} else {
		return TridentLegacy
	}
}

// getClusterRoleBindingName returns the name of the cluster role binding to use
// Parameters:
//   csi - true if Trident should be installed as a CSI driver
// Returns:
//   string - the name of the cluster role binding to use
// Example:
//   name := getClusterRoleBindingName(csi)
//
// -- Doc autogenerated on 2022-05-12 19:03:40.444825 --
func getClusterRoleBindingName(csi bool) string {
	if csi {
		return TridentCSI
	} else {
		return TridentLegacy
	}
}

// getPSPName returns the name of the PSP to be used for Trident
// Returns:
//   string: the name of the PSP to be used for Trident
// Example:
//   pspName := getPSPName()
//
// -- Doc autogenerated on 2022-05-12 19:03:40.444825 --
func getPSPName() string {
	return TridentPSP
}

// getServiceName returns the name of the service
// Returns:
//   string: service name
// Example:
//   name := getServiceName()
//
// -- Doc autogenerated on 2022-05-12 19:03:40.444825 --
func getServiceName() string {
	return TridentCSI
}

// getProtocolSecretName returns the name of the secret that contains the protocol
// for the CSI driver.
// Returns:
//   string: the name of the secret
// Example:
//   getProtocolSecretName()
//   => "trident-csi-secret"
//
// -- Doc autogenerated on 2022-05-12 19:03:40.444825 --
func getProtocolSecretName() string {
	return TridentCSI
}

// getEncryptionSecretName returns the name of the secret that contains the encryption keys
// Returns:
//   string: name of the secret
// Example:
//   name := getEncryptionSecretName()
//
// -- Doc autogenerated on 2022-05-12 19:03:40.444825 --
func getEncryptionSecretName() string {
	return TridentEncryptionKeys
}

// getDeploymentName returns the name of the Trident deployment
// Parameters:
//   csi - true if Trident is being deployed as a CSI driver
// Returns:
//   string - the name of the Trident deployment
// Example:
//   getDeploymentName(true) -> "trident-csi"
//   getDeploymentName(false) -> "trident"
//
// -- Doc autogenerated on 2022-05-12 19:03:40.444825 --
func getDeploymentName(csi bool) string {
	if csi {
		return TridentCSI
	} else {
		return TridentLegacy
	}
}

// getDaemonSetName returns the name of the Trident CSI DaemonSet.
// Returns:
//   string: The name of the Trident CSI DaemonSet.
// Example:
//   getDaemonSetName()
//
// -- Doc autogenerated on 2022-05-12 19:03:40.444825 --
func getDaemonSetName() string {
	return TridentCSI
}

// getCSIDriverName returns the name of the CSI driver
// Returns:
//   string: CSI driver name
// Example:
//   name := getCSIDriverName()
//
// -- Doc autogenerated on 2022-05-12 19:03:40.444825 --
func getCSIDriverName() string {
	return CSIDriver
}

// getOpenShiftSCCUserName returns the name of the OpenShift SCC user
// Returns:
//   TridentCSI - if Trident is deployed as a CSI driver
//   TridentLegacy - if Trident is deployed as a FlexVolume driver
// Example:
//   getOpenShiftSCCUserName() -> "trident-csi"
//
// -- Doc autogenerated on 2022-05-12 19:03:40.444825 --
func getOpenShiftSCCUserName() string {
	if csi {
		return TridentCSI
	} else {
		return TridentLegacy
	}
}

// getOpenShiftSCCName returns the name of the OpenShift SCC
// Returns:
//   string - name of the OpenShift SCC
// Example:
//   name := getOpenShiftSCCName()
//
// -- Doc autogenerated on 2022-05-12 19:03:40.444825 --
func getOpenShiftSCCName() string {
	return OpenShiftSCCName
}
