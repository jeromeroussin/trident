// Copyright 2020 NetApp, Inc. All Rights Reserved.

// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	"context"
	time "time"

	netappv1 "github.com/netapp/trident/operator/controllers/provisioner/apis/netapp/v1"
	versioned "github.com/netapp/trident/operator/controllers/provisioner/client/clientset/versioned"
	internalinterfaces "github.com/netapp/trident/operator/controllers/provisioner/client/informers/externalversions/internalinterfaces"
	v1 "github.com/netapp/trident/operator/controllers/provisioner/client/listers/netapp/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// TridentProvisionerInformer provides access to a shared informer and lister for
// TridentProvisioners.
type TridentProvisionerInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.TridentProvisionerLister
}

type tridentProvisionerInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewTridentProvisionerInformer constructs a new informer for TridentProvisioner type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewTridentProvisionerInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredTridentProvisionerInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredTridentProvisionerInformer constructs a new informer for TridentProvisioner type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredTridentProvisionerInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TridentV1().TridentProvisioners(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TridentV1().TridentProvisioners(namespace).Watch(context.TODO(), options)
			},
		},
		&netappv1.TridentProvisioner{},
		resyncPeriod,
		indexers,
	)
}

// defaultInformer is used to initialize the TridentProvisioner informer
// It returns a SharedIndexInformer for TridentProvisioner objects
// Parameters:
//   client - the TridentProvisioner client
//   resyncPeriod - the resync period
//   indexers - the indexers
// Returns:
//   a SharedIndexInformer for TridentProvisioner objects
// Example:
//   defaultInformer := v1.defaultInformer(clientset, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
//
// -- Doc autogenerated on 2022-05-12 21:19:39.312814 --
func (f *tridentProvisionerInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredTridentProvisionerInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

// Informer provides access to a shared informer and lister for
// TridentProvisioners.
// It returns a cache.SharedIndexInformer
// Returns:
//   * cache.SharedIndexInformer
// Example:
//   tpInformer := informers.NewTridentProvisionerInformer(client, 0)
//   tpInformer.Informer()
//   tpInformer.Lister()
//
// -- Doc autogenerated on 2022-05-12 21:19:39.312814 --
func (f *tridentProvisionerInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&netappv1.TridentProvisioner{}, f.defaultInformer)
}

// Lister implements a generic lister for TridentProvisioner resources.
// It returns TridentProvisioner objects retrieved from a shared informer's store.
// Returns:
//   * TridentProvisionerLister
//   * TridentProvisionerNamespaceLister
// Example:
//   lister := listers.NewTridentProvisionerLister()
//   svc, err := lister.Get("foo")
// Use "NewTridentProvisionerLister" to construct a new TridentProvisionerLister.
//
// -- Doc autogenerated on 2022-05-12 21:19:39.312814 --
func (f *tridentProvisionerInformer) Lister() v1.TridentProvisionerLister {
	return v1.NewTridentProvisionerLister(f.Informer().GetIndexer())
}
